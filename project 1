import socket
import struct

def get_mac_addr(bytes_addr):
    return ':'.join(map('{:02x}'.format, bytes_addr)).upper()

def parse_ethernet_frame(data):
    dest_mac, src_mac, proto = struct.unpack('! 6s 6s H', data[:14])
    return get_mac_addr(dest_mac), get_mac_addr(src_mac), socket.htons(proto), data[14:]

def get_ip(bytes_addr):
    return '.'.join(map(str, bytes_addr))

def parse_ipv4_header(data):
    version_header_length = data[0]
    version = version_header_length >> 4
    header_length = (version_header_length & 15) * 4
    ttl, proto, src, target = struct.unpack('! 8x B B 2x 4s 4s', data[:20])
    return version, header_length, ttl, proto, get_ip(src), get_ip(target), data[header_length:]

# Create raw socket
sniffer = socket.socket(socket.AF_PACKET, socket.SOCK_RAW, socket.ntohs(0x0003))

while True:
    raw_data, addr = sniffer.recvfrom(65535)
    dest_mac, src_mac, eth_proto, payload = parse_ethernet_frame(raw_data)
    print(f"Ethernet Frame - Destination: {dest_mac}, Source: {src_mac}, Protocol: {eth_proto}")

    if eth_proto == 8:  # IPv4
        version, header_length, ttl, proto, src, target, data = parse_ipv4_header(payload)
        print(f"\tIPv4 Packet - Version: {version}, Header Length: {header_length}, TTL: {ttl}")
        print(f"\tSource: {src}, Target: {target}, Protocol: {proto}")
